// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen, version 1.7.7.5
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace PocKafka.Infrastructure.Kafka.Models
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using global::Avro;
	using global::Avro.Specific;
	
	public partial class Battery : ISpecificRecord
	{
		public static Schema _SCHEMA = Schema.Parse(@"{""type"":""record"",""name"":""Battery"",""namespace"":""PocKafka.Infrastructure.Kafka.Models"",""fields"":[{""name"":""level"",""doc"":""Battery level. 0.0 = empty; 1.0 = full charge."",""type"":""float""},{""name"":""isCharging"",""doc"":""true when device is plugged in to power."",""type"":""boolean""}]}");
		/// <summary>
		/// Battery level. 0.0 = empty; 1.0 = full charge.
		/// </summary>
		private float _level;
		/// <summary>
		/// true when device is plugged in to power.
		/// </summary>
		private bool _isCharging;
		public virtual Schema Schema
		{
			get
			{
				return Battery._SCHEMA;
			}
		}
		/// <summary>
		/// Battery level. 0.0 = empty; 1.0 = full charge.
		/// </summary>
		public float level
		{
			get
			{
				return this._level;
			}
			set
			{
				this._level = value;
			}
		}
		/// <summary>
		/// true when device is plugged in to power.
		/// </summary>
		public bool isCharging
		{
			get
			{
				return this._isCharging;
			}
			set
			{
				this._isCharging = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.level;
			case 1: return this.isCharging;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.level = (System.Single)fieldValue; break;
			case 1: this.isCharging = (System.Boolean)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
