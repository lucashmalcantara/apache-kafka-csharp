// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen, version 1.7.7.5
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace PocKafka.Infrastructure.Kafka.Models
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using global::Avro;
	using global::Avro.Specific;
	
	public partial class Location : ISpecificRecord
	{
		public static Schema _SCHEMA = Schema.Parse("{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"PocKafka.Infrastructure.Kafka.Mod" +
				"els\",\"fields\":[{\"name\":\"uuid\",\"doc\":\"Universally Unique Identifier.\",\"type\":\"str" +
				"ing\",\"logicalType\":\"uuid\"},{\"name\":\"capturedAt\",\"doc\":\"UTC timestamp referring t" +
				"o the moment the data was captured.\",\"type\":\"long\",\"logicalType\":\"timestamp-mill" +
				"is\"},{\"name\":\"backendArrivalDate\",\"doc\":\"UTC timestamp referring to the moment t" +
				"he data arrived in the backend.\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}" +
				",{\"name\":\"event\",\"doc\":\"Event responsible for generating this location (motionch" +
				"ange, providerchange, geofence, heartbeat).\",\"type\":\"string\"},{\"name\":\"isMoving\"" +
				",\"doc\":\"true if location was recorded while plugin is in the moving state.\",\"typ" +
				"e\":\"boolean\"},{\"name\":\"coordinates\",\"doc\":\"latitude, longitude, speed, heading, " +
				"etc.\",\"type\":{\"type\":\"record\",\"name\":\"coordinates\",\"namespace\":\"PocKafka.Infrast" +
				"ructure.Kafka.Models\",\"fields\":[{\"name\":\"latitude\",\"doc\":\"Latitude of the locati" +
				"on.\",\"type\":\"double\"},{\"name\":\"longitude\",\"doc\":\"Longitude of the location.\",\"ty" +
				"pe\":\"double\"},{\"name\":\"accuracy\",\"doc\":\"Accuracy in meters.\",\"type\":\"double\"},{\"" +
				"name\":\"speed\",\"doc\":\"Speed in meters / second. Note: Only present when location " +
				"came from GPS. -1 otherwise.\",\"type\":\"double\"},{\"name\":\"heading\",\"doc\":\"Heading " +
				"in degrees. Note: Only present when location came from GPS. -1 otherwise.\",\"type" +
				"\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Altitude above sea-level in meters.\",\"type" +
				"\":\"double\"}]}},{\"name\":\"activity\",\"doc\":\"Device motion-activity when this locati" +
				"on was recorded (eg: still, on_foot, in_vehicle).\",\"type\":{\"type\":\"record\",\"name" +
				"\":\"activity\",\"namespace\":\"PocKafka.Infrastructure.Kafka.Models\",\"fields\":[{\"name" +
				"\":\"type\",\"doc\":\"The reported device motion activity (still, walking, on_foot, ru" +
				"nning, on_bicycle, in_vehicle).\",\"type\":\"string\"},{\"name\":\"confidence\",\"doc\":\"Co" +
				"nfidence of the reported device motion activity in %.\",\"type\":\"float\"}]}},{\"name" +
				"\":\"battery\",\"doc\":\"Device battery level when the location was recorded.\",\"type\":" +
				"{\"type\":\"record\",\"name\":\"battery\",\"namespace\":\"PocKafka.Infrastructure.Kafka.Mod" +
				"els\",\"fields\":[{\"name\":\"level\",\"doc\":\"Battery level. 0.0 = empty; 1.0 = full cha" +
				"rge.\",\"type\":\"float\"},{\"name\":\"isCharging\",\"doc\":\"true when device is plugged in" +
				" to power.\",\"type\":\"boolean\"}]}},{\"name\":\"odometer\",\"doc\":\"Distance-traveled in " +
				"meters.\",\"type\":\"double\"},{\"name\":\"mock\",\"doc\":\"[Android only]. Present (and tru" +
				"e) if the location was generated by a Fake Location application.\",\"type\":[\"null\"" +
				",\"boolean\"]},{\"name\":\"extras\",\"doc\":\"Business related data.\",\"type\":{\"type\":\"rec" +
				"ord\",\"name\":\"extras\",\"namespace\":\"PocKafka.Infrastructure.Kafka.Models\",\"fields\"" +
				":[{\"name\":\"clientId\",\"doc\":\"Client ID.\",\"type\":\"string\"},{\"name\":\"licensePlate\"," +
				"\"doc\":\"License plate.\",\"type\":\"string\"},{\"name\":\"vin\",\"doc\":\"Vehicle Identificat" +
				"ion Number (VIN, in portuguese, Chassi).\",\"type\":\"string\"}]}}]}");
		/// <summary>
		/// Universally Unique Identifier.
		/// </summary>
		private string _uuid;
		/// <summary>
		/// UTC timestamp referring to the moment the data was captured.
		/// </summary>
		private long _capturedAt;
		/// <summary>
		/// UTC timestamp referring to the moment the data arrived in the backend.
		/// </summary>
		private long _backendArrivalDate;
		/// <summary>
		/// Event responsible for generating this location (motionchange, providerchange, geofence, heartbeat).
		/// </summary>
		private string _event;
		/// <summary>
		/// true if location was recorded while plugin is in the moving state.
		/// </summary>
		private bool _isMoving;
		/// <summary>
		/// latitude, longitude, speed, heading, etc.
		/// </summary>
		private PocKafka.Infrastructure.Kafka.Models.coordinates _coordinates;
		/// <summary>
		/// Device motion-activity when this location was recorded (eg: still, on_foot, in_vehicle).
		/// </summary>
		private PocKafka.Infrastructure.Kafka.Models.activity _activity;
		/// <summary>
		/// Device battery level when the location was recorded.
		/// </summary>
		private PocKafka.Infrastructure.Kafka.Models.battery _battery;
		/// <summary>
		/// Distance-traveled in meters.
		/// </summary>
		private double _odometer;
		/// <summary>
		/// [Android only]. Present (and true) if the location was generated by a Fake Location application.
		/// </summary>
		private System.Nullable<bool> _mock;
		/// <summary>
		/// Business related data.
		/// </summary>
		private PocKafka.Infrastructure.Kafka.Models.extras _extras;
		public virtual Schema Schema
		{
			get
			{
				return Location._SCHEMA;
			}
		}
		/// <summary>
		/// Universally Unique Identifier.
		/// </summary>
		public string uuid
		{
			get
			{
				return this._uuid;
			}
			set
			{
				this._uuid = value;
			}
		}
		/// <summary>
		/// UTC timestamp referring to the moment the data was captured.
		/// </summary>
		public long capturedAt
		{
			get
			{
				return this._capturedAt;
			}
			set
			{
				this._capturedAt = value;
			}
		}
		/// <summary>
		/// UTC timestamp referring to the moment the data arrived in the backend.
		/// </summary>
		public long backendArrivalDate
		{
			get
			{
				return this._backendArrivalDate;
			}
			set
			{
				this._backendArrivalDate = value;
			}
		}
		/// <summary>
		/// Event responsible for generating this location (motionchange, providerchange, geofence, heartbeat).
		/// </summary>
		public string @event
		{
			get
			{
				return this._event;
			}
			set
			{
				this._event = value;
			}
		}
		/// <summary>
		/// true if location was recorded while plugin is in the moving state.
		/// </summary>
		public bool isMoving
		{
			get
			{
				return this._isMoving;
			}
			set
			{
				this._isMoving = value;
			}
		}
		/// <summary>
		/// latitude, longitude, speed, heading, etc.
		/// </summary>
		public PocKafka.Infrastructure.Kafka.Models.coordinates coordinates
		{
			get
			{
				return this._coordinates;
			}
			set
			{
				this._coordinates = value;
			}
		}
		/// <summary>
		/// Device motion-activity when this location was recorded (eg: still, on_foot, in_vehicle).
		/// </summary>
		public PocKafka.Infrastructure.Kafka.Models.activity activity
		{
			get
			{
				return this._activity;
			}
			set
			{
				this._activity = value;
			}
		}
		/// <summary>
		/// Device battery level when the location was recorded.
		/// </summary>
		public PocKafka.Infrastructure.Kafka.Models.battery battery
		{
			get
			{
				return this._battery;
			}
			set
			{
				this._battery = value;
			}
		}
		/// <summary>
		/// Distance-traveled in meters.
		/// </summary>
		public double odometer
		{
			get
			{
				return this._odometer;
			}
			set
			{
				this._odometer = value;
			}
		}
		/// <summary>
		/// [Android only]. Present (and true) if the location was generated by a Fake Location application.
		/// </summary>
		public System.Nullable<bool> mock
		{
			get
			{
				return this._mock;
			}
			set
			{
				this._mock = value;
			}
		}
		/// <summary>
		/// Business related data.
		/// </summary>
		public PocKafka.Infrastructure.Kafka.Models.extras extras
		{
			get
			{
				return this._extras;
			}
			set
			{
				this._extras = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.uuid;
			case 1: return this.capturedAt;
			case 2: return this.backendArrivalDate;
			case 3: return this.@event;
			case 4: return this.isMoving;
			case 5: return this.coordinates;
			case 6: return this.activity;
			case 7: return this.battery;
			case 8: return this.odometer;
			case 9: return this.mock;
			case 10: return this.extras;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.uuid = (System.String)fieldValue; break;
			case 1: this.capturedAt = (System.Int64)fieldValue; break;
			case 2: this.backendArrivalDate = (System.Int64)fieldValue; break;
			case 3: this.@event = (System.String)fieldValue; break;
			case 4: this.isMoving = (System.Boolean)fieldValue; break;
			case 5: this.coordinates = (PocKafka.Infrastructure.Kafka.Models.coordinates)fieldValue; break;
			case 6: this.activity = (PocKafka.Infrastructure.Kafka.Models.activity)fieldValue; break;
			case 7: this.battery = (PocKafka.Infrastructure.Kafka.Models.battery)fieldValue; break;
			case 8: this.odometer = (System.Double)fieldValue; break;
			case 9: this.mock = (System.Nullable<bool>)fieldValue; break;
			case 10: this.extras = (PocKafka.Infrastructure.Kafka.Models.extras)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
