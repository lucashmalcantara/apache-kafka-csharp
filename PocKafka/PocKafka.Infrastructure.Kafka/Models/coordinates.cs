// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen, version 1.7.7.5
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace PocKafka.Infrastructure.Kafka.Models
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using global::Avro;
	using global::Avro.Specific;
	
	public partial class coordinates : ISpecificRecord
	{
		public static Schema _SCHEMA = Schema.Parse(@"{""type"":""record"",""name"":""coordinates"",""namespace"":""PocKafka.Infrastructure.Kafka.Models"",""fields"":[{""name"":""latitude"",""doc"":""Latitude of the location."",""type"":""double""},{""name"":""longitude"",""doc"":""Longitude of the location."",""type"":""double""},{""name"":""accuracy"",""doc"":""Accuracy in meters."",""type"":""double""},{""name"":""speed"",""doc"":""Speed in meters / second. Note: Only present when location came from GPS. -1 otherwise."",""type"":""double""},{""name"":""heading"",""doc"":""Heading in degrees. Note: Only present when location came from GPS. -1 otherwise."",""type"":""double""},{""name"":""altitude"",""doc"":""Altitude above sea-level in meters."",""type"":""double""}]}");
		/// <summary>
		/// Latitude of the location.
		/// </summary>
		private double _latitude;
		/// <summary>
		/// Longitude of the location.
		/// </summary>
		private double _longitude;
		/// <summary>
		/// Accuracy in meters.
		/// </summary>
		private double _accuracy;
		/// <summary>
		/// Speed in meters / second. Note: Only present when location came from GPS. -1 otherwise.
		/// </summary>
		private double _speed;
		/// <summary>
		/// Heading in degrees. Note: Only present when location came from GPS. -1 otherwise.
		/// </summary>
		private double _heading;
		/// <summary>
		/// Altitude above sea-level in meters.
		/// </summary>
		private double _altitude;
		public virtual Schema Schema
		{
			get
			{
				return coordinates._SCHEMA;
			}
		}
		/// <summary>
		/// Latitude of the location.
		/// </summary>
		public double latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				this._latitude = value;
			}
		}
		/// <summary>
		/// Longitude of the location.
		/// </summary>
		public double longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				this._longitude = value;
			}
		}
		/// <summary>
		/// Accuracy in meters.
		/// </summary>
		public double accuracy
		{
			get
			{
				return this._accuracy;
			}
			set
			{
				this._accuracy = value;
			}
		}
		/// <summary>
		/// Speed in meters / second. Note: Only present when location came from GPS. -1 otherwise.
		/// </summary>
		public double speed
		{
			get
			{
				return this._speed;
			}
			set
			{
				this._speed = value;
			}
		}
		/// <summary>
		/// Heading in degrees. Note: Only present when location came from GPS. -1 otherwise.
		/// </summary>
		public double heading
		{
			get
			{
				return this._heading;
			}
			set
			{
				this._heading = value;
			}
		}
		/// <summary>
		/// Altitude above sea-level in meters.
		/// </summary>
		public double altitude
		{
			get
			{
				return this._altitude;
			}
			set
			{
				this._altitude = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.latitude;
			case 1: return this.longitude;
			case 2: return this.accuracy;
			case 3: return this.speed;
			case 4: return this.heading;
			case 5: return this.altitude;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.latitude = (System.Double)fieldValue; break;
			case 1: this.longitude = (System.Double)fieldValue; break;
			case 2: this.accuracy = (System.Double)fieldValue; break;
			case 3: this.speed = (System.Double)fieldValue; break;
			case 4: this.heading = (System.Double)fieldValue; break;
			case 5: this.altitude = (System.Double)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
